---
name: load-testing

on:
  workflow_dispatch:

  workflow_call:

  pull_request:
    branches:
    - main

env:
  target_ref: ${{ github.head_ref || github.ref_name }}
  GO111MODULE: on
  GOPRIVATE: ''
  DOCS: ${{ github.workspace }}/docs
  REPORT: ${{ github.workspace }}/report
jobs:
  load-test-k6:
    name: Run k6 load testing
    strategy:
      matrix:
        go-version: [1.21.x]
        os: [ubuntu-latest]
  
    runs-on: ${{ matrix.os }}

    steps:
      # Create a timestamp environment variable for the report directory
      - name: set TS to timestamp string
        run: |
          echo "TS=$(date -u +\"%Y-%m-%d_%H%M%SZ\")" >> ${GITHUB_ENV}

      - name: actions/checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.target_ref }}
          token: ${{ github.token }}
          persist-credentials: false  # otherwise, the token used is the GITHUB_TOKEN, instead of your
          #                             personal access token.
          fetch-depth: 0

      # Configure git user account for commit
      - name: Configure git user account
        run: |
          set -x
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com
          echo ${{ github.token }} | gh auth login -h github.com --with-token
          gh auth setup-git -h github.com

      # show git configuration (optional)
      - name: Show git configuration
        continue-on-error: true  # Any of the "git config --[system|global|local] --list" commands may fail if no relative config exists.  This shouldn't stop the job.
        run: |
          set -x +e
          echo "github.repository: ${{ github.repository }}"
          echo "env.target_ref: ${{ env.target_ref }}"
          git --version
          git config --system --list
          git config --global --list
          git config --local --list

      # Install Go
      - name: actions/setup-go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491  # v5.0.0
        with:
          go-version: ${{ matrix.go-version }}

      # Show the Go environment (optional)
      - name: report go environment
        run: |
          go version
          go env
          go clean --cache

      # Install go pacakges
      - name: Install go packages
        run: |
          go install go.k6.io/xk6/cmd/xk6@latest

      # Install Node.js
      - name: actions/setup-node
        uses: actions/setup-node@b39b52d1213e96004bfcb1c61a8a6fa8ab84f3e8  # v4.0.1
        with:
          node-version: 21.2.0

      # Install Node.js dependencies
      - name: install node dependencies
        run: |
          set -x
          npm install @types/node
          npm install @types/k6

      # Install k6
      - name: install k6
        run: |
          set -x
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      # Build new instance of k6 with xk6-dashboard extension
      - name: xk6 build
        run: |
          set -x
          xk6 build --output ./k6 --with github.com/grafana/xk6-dashboard@latest

      # Compile the TypeScript file to JavaScript
      - name: tsc
        continue-on-error: true  # tsc will 'error TS2307' on imports that it cannot resolve. This is ok as long as the .js file is created and it can import them.
        run: |
          set -x
          tsc --version && tsc --project ./tsconfig.json --showConfig
          tsc k6-load-test-example.ts || true

      # Run the k6 load test
      - name: run k6 load testing
        run: |
          set -x
          mkdir -p ${{ env.REPORT }}
          ./k6 version
          ./k6 run --out=web-dashboard=export=${{ env.REPORT }}/k6-web-dashboard-report.html --out=json=${{ env.REPORT }}/k6-web-dashboard-report.json --log-output=file=${{ env.REPORT }}/k6-load-test-example.log k6-load-test-example.js --verbose

      # Create directory for the report artifacts and copy them to the folder
      - name: timestamp the report artifacts
        run: |
          set -x
          mkdir -p ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}
          cp ${{ env.REPORT }}/*                                 ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/
          cp ${{ env.DOCS }}/reports/load-testing/template.html  ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/index.html
          cp ${{ env.DOCS }}/reports/load-testing/README.md      ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/README.md
          echo "[${{ env.TS }}](https://mdonahue-godaddy.github.io/k6-web-dashboard-example/reports/load-testing/${{ env.TS }}/index.html)" >> ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/README.md
          echo "" >> ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/README.md
          # copy README.md to other subdirectories
          cp ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/README.md  ${{ env.DOCS }}/README.md
          cp ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/README.md  ${{ env.DOCS }}/reports/README.md
          cp ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/README.md  ${{ env.DOCS }}/reports/load-testing/README.md

      # Upload generated artifacts for historical reference
      #- name: actions/upload-artifact
      #  uses: actions/upload-artifact@694cdabd8bdb0f10b2cea11669e1bf5453eed0a6  # v4.2.0
      #  with:
      #    name: k6-load-testing-reports
      #    path: ${{ env.REPORT }}/*
      #    retention-days: 366

      #- name: actions/upload-pages-artifact
      #  uses: actions/upload-pages-artifact@0252fc4ba7626f0298f0cf00902a25c6afc77fa8  #v3.0.0
      #  with:
      #    name: 'github-pages'
      #    path: "${{ env.DOCS }}/"  # upload docs / pages folder
      #    retention-days: 366

      # Push the generated reports to GitHub Pages
      - name: Add & Commit latest report files
        env:
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_REF: ${{ env.target_ref }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          git add -v -f ${{ env.DOCS }}/reports/load-testing/${{ env.TS }}/*
          git add -v -f ${{ env.DOCS }}/README.md
          git add -v -f ${{ env.DOCS }}/reports/README.md
          git add -v -f ${{ env.DOCS }}/reports/load-testing/README.md
          git commit -v -m "Add HTML Load Testing Report" --no-verify
          git push origin ${{ env.target_ref }} -f --no-verify
